<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on 逃避虽然可耻但有用</title><link>https://www.leelib.com/tags/c.html</link><description>Recent content in C on 逃避虽然可耻但有用</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 03 Oct 2013 15:21:16 +0800</lastBuildDate><atom:link href="https://www.leelib.com/tags/c/atom.xml" rel="self" type="application/rss+xml"/><item><title>error LNK2026: module unsafe for SAFESEH image 解决方案</title><link>https://www.leelib.com/2013/10/03/error-lnk2026-module-unsafe-for-safeseh-image.html</link><pubDate>Thu, 03 Oct 2013 15:21:16 +0800</pubDate><guid>https://www.leelib.com/2013/10/03/error-lnk2026-module-unsafe-for-safeseh-image.html</guid><description>&lt;h1 id="解决方案">解决方案&lt;/h1>
&lt;p>下面两种随便选一种&lt;/p>
&lt;h2 id="方法1">方法1&lt;/h2>
&lt;p>去掉项目设置中: &lt;strong>Linker -&amp;gt; Advanced -&amp;gt; [Image Has Safe Exception Handlers] = &amp;ldquo;No&amp;rdquo;&lt;/strong>&lt;/p>
&lt;h2 id="方法2">方法2&lt;/h2>
&lt;p>直接在代码中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#pragma comment(linker, &amp;#34;/SAFESEH:NO&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python的zlib压缩解压缩对应的C语言方式</title><link>https://www.leelib.com/2013/07/02/python-zlib-trans-c.html</link><pubDate>Tue, 02 Jul 2013 15:47:00 +0800</pubDate><guid>https://www.leelib.com/2013/07/02/python-zlib-trans-c.html</guid><description>&lt;h1 id="压缩">压缩&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>enData &lt;span style="color:#f92672">=&lt;/span> zlib&lt;span style="color:#f92672">.&lt;/span>compress(data)[&lt;span style="color:#ae81ff">2&lt;/span>:&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">compress2&lt;/span>(dstbuf, &lt;span style="color:#f92672">&amp;amp;&lt;/span>dstLen, strSrc, srcLen, &lt;span style="color:#ae81ff">6&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="解压">解压&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>deData &lt;span style="color:#f92672">=&lt;/span> zlib&lt;span style="color:#f92672">.&lt;/span>decompress(enData, &lt;span style="color:#f92672">-&lt;/span>zlib&lt;span style="color:#f92672">.&lt;/span>MAX_WBITS)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">gzipInflate&lt;/span>( &lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;amp;&lt;/span> compressedBytes, std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;amp;&lt;/span> uncompressedBytes ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompressedBytes &lt;span style="color:#f92672">=&lt;/span> compressedBytes ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> true ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompressedBytes.&lt;span style="color:#a6e22e">clear&lt;/span>() ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> full_length &lt;span style="color:#f92672">=&lt;/span> compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> half_length &lt;span style="color:#f92672">=&lt;/span> compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> uncompLength &lt;span style="color:#f92672">=&lt;/span> full_length ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> uncomp &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#a6e22e">calloc&lt;/span>( &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span>), uncompLength );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> z_stream strm;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.next_in &lt;span style="color:#f92672">=&lt;/span> (Bytef &lt;span style="color:#f92672">*&lt;/span>) compressedBytes.&lt;span style="color:#a6e22e">c_str&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.avail_in &lt;span style="color:#f92672">=&lt;/span> compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.total_out &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.zalloc &lt;span style="color:#f92672">=&lt;/span> Z_NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.zfree &lt;span style="color:#f92672">=&lt;/span> Z_NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> done &lt;span style="color:#f92672">=&lt;/span> false ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//if (inflateInit2(&amp;amp;strm, (16+MAX_WBITS)) != Z_OK)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">inflateInit2&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>strm, &lt;span style="color:#f92672">-&lt;/span>MAX_WBITS) &lt;span style="color:#f92672">!=&lt;/span> Z_OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>done) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If our output buffer is too small
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (strm.total_out &lt;span style="color:#f92672">&amp;gt;=&lt;/span> uncompLength ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Increase size of output buffer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> uncomp2 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#a6e22e">calloc&lt;/span>( &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span>), uncompLength &lt;span style="color:#f92672">+&lt;/span> half_length );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memcpy&lt;/span>( uncomp2, uncomp, uncompLength );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompLength &lt;span style="color:#f92672">+=&lt;/span> half_length ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncomp &lt;span style="color:#f92672">=&lt;/span> uncomp2 ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.next_out &lt;span style="color:#f92672">=&lt;/span> (Bytef &lt;span style="color:#f92672">*&lt;/span>) (uncomp &lt;span style="color:#f92672">+&lt;/span> strm.total_out);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.avail_out &lt;span style="color:#f92672">=&lt;/span> uncompLength &lt;span style="color:#f92672">-&lt;/span> strm.total_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Inflate another chunk.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">inflate&lt;/span> (&lt;span style="color:#f92672">&amp;amp;&lt;/span>strm, Z_SYNC_FLUSH);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (err &lt;span style="color:#f92672">==&lt;/span> Z_STREAM_END) done &lt;span style="color:#f92672">=&lt;/span> true;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (err &lt;span style="color:#f92672">!=&lt;/span> Z_OK) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">inflateEnd&lt;/span> (&lt;span style="color:#f92672">&amp;amp;&lt;/span>strm) &lt;span style="color:#f92672">!=&lt;/span> Z_OK) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( &lt;span style="color:#66d9ef">size_t&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>strm.total_out; &lt;span style="color:#f92672">++&lt;/span>i ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompressedBytes &lt;span style="color:#f92672">+=&lt;/span> uncomp[ i ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> true ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Linux下编译驱动代码时smp_lock.h文件找不到的解决方案</title><link>https://www.leelib.com/2013/06/01/compile-can-not-found-smp-lock-h.html</link><pubDate>Sat, 01 Jun 2013 13:07:20 +0800</pubDate><guid>https://www.leelib.com/2013/06/01/compile-can-not-found-smp-lock-h.html</guid><description>&lt;p>&lt;img src="https://www.leelib.com/wp-content/uploads/2013/06/linux_kernel.webp#center" alt="kernel">&lt;/p>
&lt;p>项目中有个驱动代码之前在老版本linux系统中编写的
在移植到 &lt;strong>linux-kernel-3.2.0&lt;/strong> 后，编译时出现一处错误 &lt;strong>fatal error: linux/smp_lock.h: No such file or directory&lt;/strong>&lt;/p>
&lt;h1 id="解决办法">解决办法&lt;/h1>
&lt;p>将：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/smp_lock.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>替换成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/hardirq.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>