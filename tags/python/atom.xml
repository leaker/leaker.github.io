<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 逃避虽然可耻但有用</title><link>https://www.leelib.com/tags/python.html</link><description>Recent content in Python on 逃避虽然可耻但有用</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 10 Jul 2013 06:27:35 +0800</lastBuildDate><atom:link href="https://www.leelib.com/tags/python/atom.xml" rel="self" type="application/rss+xml"/><item><title>如何安装新版本python，以及解决安装了新版python后，默认python依然调用旧版本的问题</title><link>https://www.leelib.com/2013/07/10/fix-python-deff-version.html</link><pubDate>Wed, 10 Jul 2013 06:27:35 +0800</pubDate><guid>https://www.leelib.com/2013/07/10/fix-python-deff-version.html</guid><description>&lt;h1 id="安装新版本python">安装新版本python&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar xjf Python-2.7.3.tar.bz2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd Python-2.7.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make atlinstall
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时 python2.7.3 版本已经安装成功了。
但调用 &lt;strong>python &amp;ndash;version&lt;/strong> 依然会显示并使用旧版本&lt;/p>
&lt;h1 id="解决办法就是重新建立一个链接并覆盖掉旧的">解决办法就是重新建立一个链接并覆盖掉旧的&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ln -s /usr/local/bin/python2.7 /usr/bin/python -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再调用 &lt;strong>python &amp;ndash;version&lt;/strong> 显示结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@centos&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># python --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python 2.7.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，问题解决 :)&lt;/p></description></item><item><title>python的zlib压缩解压缩对应的C语言方式</title><link>https://www.leelib.com/2013/07/02/python-zlib-trans-c.html</link><pubDate>Tue, 02 Jul 2013 15:47:00 +0800</pubDate><guid>https://www.leelib.com/2013/07/02/python-zlib-trans-c.html</guid><description>&lt;h1 id="压缩">压缩&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>enData &lt;span style="color:#f92672">=&lt;/span> zlib&lt;span style="color:#f92672">.&lt;/span>compress(data)[&lt;span style="color:#ae81ff">2&lt;/span>:&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">compress2&lt;/span>(dstbuf, &lt;span style="color:#f92672">&amp;amp;&lt;/span>dstLen, strSrc, srcLen, &lt;span style="color:#ae81ff">6&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="解压">解压&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>deData &lt;span style="color:#f92672">=&lt;/span> zlib&lt;span style="color:#f92672">.&lt;/span>decompress(enData, &lt;span style="color:#f92672">-&lt;/span>zlib&lt;span style="color:#f92672">.&lt;/span>MAX_WBITS)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">gzipInflate&lt;/span>( &lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;amp;&lt;/span> compressedBytes, std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;amp;&lt;/span> uncompressedBytes ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompressedBytes &lt;span style="color:#f92672">=&lt;/span> compressedBytes ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> true ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompressedBytes.&lt;span style="color:#a6e22e">clear&lt;/span>() ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> full_length &lt;span style="color:#f92672">=&lt;/span> compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> half_length &lt;span style="color:#f92672">=&lt;/span> compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> uncompLength &lt;span style="color:#f92672">=&lt;/span> full_length ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> uncomp &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#a6e22e">calloc&lt;/span>( &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span>), uncompLength );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> z_stream strm;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.next_in &lt;span style="color:#f92672">=&lt;/span> (Bytef &lt;span style="color:#f92672">*&lt;/span>) compressedBytes.&lt;span style="color:#a6e22e">c_str&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.avail_in &lt;span style="color:#f92672">=&lt;/span> compressedBytes.&lt;span style="color:#a6e22e">size&lt;/span>() ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.total_out &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.zalloc &lt;span style="color:#f92672">=&lt;/span> Z_NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.zfree &lt;span style="color:#f92672">=&lt;/span> Z_NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> done &lt;span style="color:#f92672">=&lt;/span> false ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//if (inflateInit2(&amp;amp;strm, (16+MAX_WBITS)) != Z_OK)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">inflateInit2&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>strm, &lt;span style="color:#f92672">-&lt;/span>MAX_WBITS) &lt;span style="color:#f92672">!=&lt;/span> Z_OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>done) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If our output buffer is too small
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (strm.total_out &lt;span style="color:#f92672">&amp;gt;=&lt;/span> uncompLength ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Increase size of output buffer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> uncomp2 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#a6e22e">calloc&lt;/span>( &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span>), uncompLength &lt;span style="color:#f92672">+&lt;/span> half_length );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memcpy&lt;/span>( uncomp2, uncomp, uncompLength );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompLength &lt;span style="color:#f92672">+=&lt;/span> half_length ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncomp &lt;span style="color:#f92672">=&lt;/span> uncomp2 ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.next_out &lt;span style="color:#f92672">=&lt;/span> (Bytef &lt;span style="color:#f92672">*&lt;/span>) (uncomp &lt;span style="color:#f92672">+&lt;/span> strm.total_out);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strm.avail_out &lt;span style="color:#f92672">=&lt;/span> uncompLength &lt;span style="color:#f92672">-&lt;/span> strm.total_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Inflate another chunk.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">inflate&lt;/span> (&lt;span style="color:#f92672">&amp;amp;&lt;/span>strm, Z_SYNC_FLUSH);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (err &lt;span style="color:#f92672">==&lt;/span> Z_STREAM_END) done &lt;span style="color:#f92672">=&lt;/span> true;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (err &lt;span style="color:#f92672">!=&lt;/span> Z_OK) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">inflateEnd&lt;/span> (&lt;span style="color:#f92672">&amp;amp;&lt;/span>strm) &lt;span style="color:#f92672">!=&lt;/span> Z_OK) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( &lt;span style="color:#66d9ef">size_t&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>strm.total_out; &lt;span style="color:#f92672">++&lt;/span>i ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uncompressedBytes &lt;span style="color:#f92672">+=&lt;/span> uncomp[ i ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>( uncomp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> true ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>将M8导出的联系人XML转化成Andriod可以导入的vcf文件</title><link>https://www.leelib.com/2012/04/12/convert-m8-contacts-xml-to-andriod-vcf.html</link><pubDate>Thu, 12 Apr 2012 09:27:17 +0800</pubDate><guid>https://www.leelib.com/2012/04/12/convert-m8-contacts-xml-to-andriod-vcf.html</guid><description>&lt;p>&lt;img src="https://www.leelib.com/wp-content/uploads/2012/04/android.webp#center" alt="android">&lt;/p>
&lt;p>通过我写的一段Python代码可以让M8用户将联系人导入到Andriod系统中。&lt;/p>
&lt;h2 id="操作需要以下步骤">操作需要以下步骤：&lt;/h2>
&lt;ol>
&lt;li>先用M8PC工具将M8的联系人导出成XML格式。&lt;/li>
&lt;li>将导出的文件重命名为mycontact.xml，并与m8toAndriod.py放到同一目录下&lt;/li>
&lt;li>运行 python m8toAndriod.py 程序会生成一个名为 mycontact.vcf 的文件&lt;/li>
&lt;li>将 mycontact.vcf 传到Andriod手机中导入&lt;/li>
&lt;/ol>
&lt;h2 id="以下为-m8toandriodpy-的代码">以下为 m8toAndriod.py 的代码：&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># coding: utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 功能：将M8导出的联系人XML转化成Andriod可以导入的vcf文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 版本：python 2.6 以上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 作者：leaker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 网站：http://www.leelib.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> xml.etree &lt;span style="color:#f92672">import&lt;/span> ElementTree &lt;span style="color:#66d9ef">as&lt;/span> ET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 输出到的mycontact.vcf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out &lt;span style="color:#f92672">=&lt;/span> file(&lt;span style="color:#e6db74">&amp;#34;mycontact.vcf&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#f92672">=&lt;/span> ET&lt;span style="color:#f92672">.&lt;/span>parse(file(&lt;span style="color:#e6db74">&amp;#34;mycontact.xml&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>getroot()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> e &lt;span style="color:#f92672">in&lt;/span> root&lt;span style="color:#f92672">.&lt;/span>findall(&lt;span style="color:#e6db74">&amp;#39;Person&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;BEGIN:VCARDrnVERSION:3.0rn&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;N:&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">;;;rn&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (e&lt;span style="color:#f92672">.&lt;/span>findtext(&lt;span style="color:#e6db74">&amp;#39;LastName&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span>), e&lt;span style="color:#f92672">.&lt;/span>findtext(&lt;span style="color:#e6db74">&amp;#39;FirstName&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;FN:&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">rn&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (e&lt;span style="color:#f92672">.&lt;/span>findtext(&lt;span style="color:#e6db74">&amp;#39;FileAs&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># print &amp;#39;FN:%srn&amp;#39;% (e.findtext(&amp;#39;FileAs&amp;#39;, &amp;#39;&amp;#39;).encode(&amp;#39;gb2312&amp;#39;))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ee &lt;span style="color:#f92672">in&lt;/span> root&lt;span style="color:#f92672">.&lt;/span>findall(&lt;span style="color:#e6db74">&amp;#39;Phone&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ee&lt;span style="color:#f92672">.&lt;/span>findtext(&lt;span style="color:#e6db74">&amp;#39;PersonID&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> e&lt;span style="color:#f92672">.&lt;/span>findtext(&lt;span style="color:#e6db74">&amp;#39;ID&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> primary &lt;span style="color:#f92672">=&lt;/span> ee&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;IsPrimary&amp;#39;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;true&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;TEL;TYPE=CELL&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">rn&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> ((&lt;span style="color:#e6db74">&amp;#39;;TYPE=PREF&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> primary &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>), ee&lt;span style="color:#f92672">.&lt;/span>findtext(&lt;span style="color:#e6db74">&amp;#39;Info&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;END:VCARDrn&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>点击这里下载：&lt;a href="https://www.leelib.com/wp-content/uploads/2012/04/m8toAndriod.7z">m8toAndriod.7z&lt;/a>&lt;/p></description></item></channel></rss>